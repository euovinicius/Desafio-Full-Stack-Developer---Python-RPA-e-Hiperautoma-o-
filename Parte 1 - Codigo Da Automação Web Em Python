import os
import base64
import json
import random
import time
from io import BytesIO
from PIL import Image
from typing import Optional, List
from functools import partial
from concurrent.futures import ProcessPoolExecutor

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
try:
    from playwright_stealth import stealth_sync
except ImportError:
    stealth_sync = None

def random_sleep(min_sec: float = 1, max_sec: float = 3) -> None:
    time.sleep(random.uniform(min_sec, max_sec))

def is_cpf(val: str) -> bool:
    return val.isdigit() and len(val) == 11

def consultar_e_abrir_primeiro(termo_busca: str, filtros_refino: Optional[List[str]] = None) -> dict:
    if filtros_refino is None:
        filtros_refino = []

    tipo_entrada = "CPF" if is_cpf(termo_busca) else "Nome"

    with sync_playwright() as p:
        browser = p.chromium.launch(
            headless=True,
            args=["--no-sandbox", "--disable-dev-shm-usage"]
        )
        ctx_kwargs = {
            "user_agent": (
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/114.0.0.0 Safari/537.36"
            ),
            "viewport": {"width": 1920, "height": 1080},
            "locale": "pt-BR",
            "timezone_id": "America/Sao_Paulo"
        }
        if os.path.exists("state.json"):
            ctx_kwargs["storage_state"] = "state.json"

        context = browser.new_context(**ctx_kwargs)
        context.add_init_script("""
            Object.defineProperty(navigator, 'webdriver', { get: () => false });
            window.chrome = { runtime: {} };
            Object.defineProperty(navigator, 'languages', { get: () => ['pt-BR', 'pt'] });
            Object.defineProperty(navigator, 'plugins', { get: () => [1,2,3] });
        """)
        page = context.new_page()
        if stealth_sync:
            stealth_sync(page)

        try:
            page.goto("https://portaldatransparencia.gov.br/pessoa/visao-geral", timeout=60000)
            random_sleep()

            try:
                page.locator("#accept-minimal-btn").click(timeout=3000)
                random_sleep(1, 2)
            except:
                page.evaluate("() => { const bar = document.getElementById('cookiebar'); if (bar) bar.remove(); }")
                random_sleep()

            page.locator("#button-consulta-pessoa-fisica").click()
            random_sleep()
            page.locator("#termo").fill(termo_busca)
            random_sleep()

            page.locator("button[aria-controls='box-busca-refinada']").click()
            page.wait_for_selector("#box-busca-refinada", timeout=15000)
            random_sleep()
            for fid in filtros_refino:
                lbl = page.locator(f"label[for='{fid}']")
                lbl.scroll_into_view_if_needed()
                lbl.click()
                random_sleep(0.5, 1.5)

            page.locator("#btnConsultarPF").click()

            try:
                page.wait_for_selector("#resultados .link-busca-nome", timeout=15000)
            except PlaywrightTimeoutError:
                if page.is_visible(".alert-warning"):
                    mensagem = page.locator(".alert-warning").inner_text()
                    if "0 resultados" in mensagem:
                        return {
                            "status": f"Erro ({tipo_entrada})",
                            "erro": f"Foram encontrados 0 resultados para o termo '{termo_busca}'"
                        }
                return {
                    "status": f"Erro ({tipo_entrada})",
                    "erro": "Não foi possível retornar os dados no tempo de resposta solicitado"
                }

            primeiro = page.locator("#resultados .link-busca-nome").first
            primeiro.click()
            page.wait_for_selector("section.dados-tabelados", timeout=30000)

            nome = page.locator(".col-xs-12.col-sm-4 span").inner_text().strip()
            spans = page.locator(".col-xs-12.col-sm-3 span").all_inner_texts()
            cpf = spans[0].strip() if spans else ""
            localidade = spans[1].strip() if len(spans) > 1 else ""

            recv_btn = page.locator("button.header[aria-controls='accordion-recebimentos-recursos']")
            recv_btn.wait_for(state="visible", timeout=15000)
            recv_btn.scroll_into_view_if_needed()
            random_sleep()
            handle = recv_btn.element_handle()
            if handle:
                page.evaluate("btn => btn.click()", handle)
            random_sleep(1, 2)
            page.wait_for_selector("#accordion-recebimentos-recursos .responsive", timeout=15000)

            beneficio = page.locator("#accordion-recebimentos-recursos .responsive strong").inner_text().strip()
            valor = page.locator("#accordion-recebimentos-recursos .responsive tbody tr td:last-child").inner_text().strip()

            screenshot = page.screenshot(full_page=False)
            img_b64 = base64.b64encode(screenshot).decode()

            det_btn = page.locator("#btnDetalharBpc")
            det_btn.wait_for(state="visible", timeout=15000)
            det_btn.click()
            page.wait_for_selector(".dados-detalhados", timeout=30000)
            detalhes = page.locator(".dados-detalhados td").all_inner_texts()

            page.locator("#btnPaginacaoCompleta").click()
            random_sleep()
            headers = [h.inner_text().strip() for h in page.query_selector_all("#tabelaDetalheDisponibilizado thead th")]
            rows = page.query_selector_all("#tabelaDetalheDisponibilizado tbody tr")
            tabela = [dict(zip(headers, [c.inner_text().strip() for c in row.query_selector_all("td span")])) for row in rows]

            resultado = {
                "status": f"Sucesso ({tipo_entrada})",
                "nome": nome,
                "cpf": cpf,
                "localidade": localidade,
                "beneficio": beneficio,
                "valor": valor,
                "detalhes": detalhes,
                "tabela_completa": tabela,
                "screenshot_base64": img_b64
            }
            return resultado

        except Exception as e:
            print(f"Erro: {e}")
            return {"status": f"Erro ({tipo_entrada})", "erro": str(e)}
        finally:
            context.close()
            browser.close()

def main(termos: List[str]):
    worker = partial(consultar_e_abrir_primeiro, filtros_refino=["beneficiarioProgramaSocial"])
    with ProcessPoolExecutor(max_workers=4) as executor:
        results = list(executor.map(worker, termos))
    with open("todos_dados.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)

if __name__ == "__main__":
    cpfs = ["x", "xx", "Nome de Teste", "Nome Que Nao Existe 123"]
    main(cpfs)
